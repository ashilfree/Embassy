<?php

namespace ContainerU00CKmh;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = new \Doctrine\ORM\Configuration();

        $b = new \Symfony\Component\Cache\DoctrineProvider(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $c = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $d = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($container->privates['annotations.cached_reader'] ?? $container->getAnnotations_CachedReaderService()), [0 => (\dirname(__DIR__, 4).'/src/Entity'), 1 => (\dirname(__DIR__, 4).'/vendor/tattali/calendar-bundle/src/Entity')]);
        $e = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver([(\dirname(__DIR__, 4).'/vendor/vich/uploader-bundle/src/Resources/config/doctrine') => 'Vich\\UploaderBundle\\Entity']);
        $e->setGlobalBasename('mapping');

        $c->addDriver($d, 'App\\Entity');
        $c->addDriver($d, 'CalendarBundle\\Entity');
        $c->addDriver($e, 'Vich\\UploaderBundle\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity', 'VichUploaderBundle' => 'Vich\\UploaderBundle\\Entity', 'CalendarBundle' => 'CalendarBundle\\Entity']);
        $a->setMetadataCacheImpl(new \Symfony\Component\Cache\DoctrineProvider(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\DoctrineAdapter($b))));
        $a->setQueryCacheImpl($b);
        $a->setResultCacheImpl(new \Symfony\Component\Cache\DoctrineProvider(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService'))));
        $a->setMetadataDriverImpl($c);
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\AffaireRepository' => ['privates', 'App\\Repository\\AffaireRepository', 'getAffaireRepositoryService', true],
            'App\\Repository\\AmbassadorRepository' => ['privates', 'App\\Repository\\AmbassadorRepository', 'getAmbassadorRepositoryService', true],
            'App\\Repository\\ArticleRepository' => ['privates', 'App\\Repository\\ArticleRepository', 'getArticleRepositoryService', true],
            'App\\Repository\\BookingRepository' => ['privates', 'App\\Repository\\BookingRepository', 'getBookingRepositoryService', true],
            'App\\Repository\\BookingWithAmbassadorRepository' => ['privates', 'App\\Repository\\BookingWithAmbassadorRepository', 'getBookingWithAmbassadorRepositoryService', true],
            'App\\Repository\\CitizenRepository' => ['privates', 'App\\Repository\\CitizenRepository', 'getCitizenRepositoryService', true],
            'App\\Repository\\DocumentRepository' => ['privates', 'App\\Repository\\DocumentRepository', 'getDocumentRepositoryService', true],
            'App\\Repository\\PopupRepository' => ['privates', 'App\\Repository\\PopupRepository', 'getPopupRepositoryService', true],
            'App\\Repository\\RelationRepository' => ['privates', 'App\\Repository\\RelationRepository', 'getRelationRepositoryService', true],
            'App\\Repository\\SchedulerRepository' => ['privates', 'App\\Repository\\SchedulerRepository', 'getSchedulerRepositoryService', true],
            'App\\Repository\\SectionRepository' => ['privates', 'App\\Repository\\SectionRepository', 'getSectionRepositoryService', true],
            'App\\Repository\\SliderRepository' => ['privates', 'App\\Repository\\SliderRepository', 'getSliderRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
            'App\\Repository\\VisaRepository' => ['privates', 'App\\Repository\\VisaRepository', 'getVisaRepositoryService', true],
        ], [
            'App\\Repository\\AffaireRepository' => '?',
            'App\\Repository\\AmbassadorRepository' => '?',
            'App\\Repository\\ArticleRepository' => '?',
            'App\\Repository\\BookingRepository' => '?',
            'App\\Repository\\BookingWithAmbassadorRepository' => '?',
            'App\\Repository\\CitizenRepository' => '?',
            'App\\Repository\\DocumentRepository' => '?',
            'App\\Repository\\PopupRepository' => '?',
            'App\\Repository\\RelationRepository' => '?',
            'App\\Repository\\SchedulerRepository' => '?',
            'App\\Repository\\SectionRepository' => '?',
            'App\\Repository\\SliderRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
            'App\\Repository\\VisaRepository' => '?',
        ])));
        $a->addCustomStringFunction('MONTH', 'DoctrineExtensions\\Query\\Mysql\\Month');
        $a->addCustomStringFunction('YEAR', 'DoctrineExtensions\\Query\\Mysql\\Year');

        $container->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
