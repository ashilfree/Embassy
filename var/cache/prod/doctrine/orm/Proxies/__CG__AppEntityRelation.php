<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Relation extends \App\Entity\Relation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'title', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'titleEn', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'titleFr', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'content', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'contentEn', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'contentFr'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'title', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'titleEn', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'titleFr', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'content', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'contentEn', '' . "\0" . 'App\\Entity\\Relation' . "\0" . 'contentFr'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Relation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title): \App\Entity\Relation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', []);

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent(?string $content): \App\Entity\Relation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', [$content]);

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityName', []);

        return parent::getEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleEn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleEn', []);

        return parent::getTitleEn();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitleEn($titleEn): \App\Entity\Relation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitleEn', [$titleEn]);

        return parent::setTitleEn($titleEn);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleFr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleFr', []);

        return parent::getTitleFr();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitleFr($titleFr): \App\Entity\Relation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitleFr', [$titleFr]);

        return parent::setTitleFr($titleFr);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentEn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentEn', []);

        return parent::getContentEn();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentEn($contentEn): \App\Entity\Relation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentEn', [$contentEn]);

        return parent::setContentEn($contentEn);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentFr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentFr', []);

        return parent::getContentFr();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentFr($contentFr): \App\Entity\Relation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentFr', [$contentFr]);

        return parent::setContentFr($contentFr);
    }

}
